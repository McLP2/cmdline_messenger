package com.netzwerk.savechat.server;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import java.io.*;
import java.net.*;
import java.security.*;
import java.security.spec.*;
import java.util.*;

public class UserThread extends Thread {
    private static final byte[] prvbytes = {48, -126, 9, 65, 2, 1, 0, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 1, 5, 0, 4, -126, 9, 43, 48, -126, 9, 39, 2, 1, 0, 2, -126, 2, 1, 0, -109, -106, 17, 0, 48, 83, -42, -40, 114, -57, 100, -64, -70, -16, 6, 80, -79, 17, -87, -35, -53, 112, 29, 87, -40, -39, -44, -6, -109, -74, -78, -101, -81, -117, -24, -73, -68, -41, 10, -109, -30, 18, 107, 29, -88, 103, -100, -4, -34, 20, -1, -25, 124, -26, -62, -75, 68, 110, -26, -122, -117, 73, -98, 42, 33, 20, -95, 12, 82, -63, -84, -27, 14, -72, -125, 122, -122, 112, -127, -111, 0, -27, 96, -97, -29, 40, -40, -113, -109, -28, -9, -123, 110, 11, 89, 99, 60, -16, -97, -81, -62, -45, 4, 98, -37, -63, -60, -101, 5, 72, -124, -43, 63, 122, 47, -102, 48, -119, 94, 51, 39, 6, 73, 43, -80, -38, 62, 3, -52, -39, 54, 118, -81, 7, 44, 10, -24, -105, -10, -76, -43, -31, -51, 74, -11, -29, 99, 78, 14, -33, -123, -128, 2, 40, 49, -22, 50, 78, 2, 32, -87, 89, 40, -109, 105, 91, 63, 30, -114, -77, 74, -39, -62, -28, -44, 63, -111, -35, 94, 11, 93, 127, -5, -50, -124, 86, 60, 98, 1, 70, 86, -94, 26, -54, 21, -96, -84, 11, 127, 46, 6, -57, -30, 6, -43, -25, -14, -72, 90, 4, -69, 75, -54, 98, -69, -107, -85, -39, 50, -4, -31, -39, 94, 88, 97, 125, 117, 26, 59, -62, 75, 26, 27, 54, -13, 99, -67, 0, -76, 33, -111, 113, 79, -102, -71, -10, 46, 67, 119, 51, 92, 95, -75, -56, 42, -31, 30, -122, -85, 42, -44, 120, 36, -95, 26, 59, -103, 88, -58, -93, 107, -57, -45, -127, 111, -83, -80, -13, 108, 124, -126, -105, -38, -91, 17, -121, 72, -77, 100, 25, -66, 126, 83, -22, 117, -77, 92, -72, 12, 2, -91, -83, -66, 81, 86, 125, -106, -43, 54, 33, 63, 71, 3, -100, 5, -128, -55, 1, 110, -37, -30, -51, -14, 56, 65, -31, 108, 119, -117, 89, 120, -56, -16, 95, -12, 104, 79, 49, -101, 123, -26, -30, -49, 91, 62, 125, -124, -99, 42, 42, 35, -7, -91, -28, -12, -39, 56, -27, -115, 98, 30, -40, 119, -48, 23, -47, 23, -113, -48, -58, -87, -109, -27, -33, -68, 116, 54, -34, -7, -97, 72, 28, 89, -114, -18, -44, -96, -71, -44, 59, 94, -114, 125, 77, 127, 126, 86, -57, 93, -117, -64, -47, 119, 79, -41, 22, -20, -127, -39, 103, 113, 60, -88, -83, -1, 75, 82, -90, -47, 85, -73, 57, -80, -46, -79, -112, -100, 37, -79, 25, -93, 51, 93, -74, 62, -43, 94, 62, -109, 39, 34, 47, -100, 85, -67, -110, 115, 6, -14, -106, 96, 93, -116, -45, 117, -22, -111, -90, 78, 22, 35, 121, -28, -92, -85, 17, 22, -33, -112, 100, 104, -87, 48, -106, 70, -76, -112, 89, 84, -112, 41, -16, -75, -29, 38, -118, -49, -28, -88, 36, -61, -41, 78, -11, 29, 111, -121, 114, -10, -9, -90, -94, -24, 53, -1, -66, -84, 17, 77, 38, 99, -107, 2, 3, 1, 0, 1, 2, -126, 2, 0, 51, -54, 87, -112, -17, 100, -100, 98, 60, 117, 8, 64, 49, -39, -124, -3, -48, 5, 88, -52, -62, 85, 71, -106, -54, 60, 54, -26, -17, -21, 14, -26, 95, 70, 3, -106, 102, -88, 55, -56, 9, 111, 89, 51, -127, 35, 75, 13, -39, -119, 24, -4, 76, -14, 85, -91, 114, -84, 80, 45, 42, -73, -36, -50, -1, -24, -45, 83, 21, -65, 109, 66, -68, 85, -73, -99, -55, -117, -75, -116, 2, -6, 123, 91, -32, 69, 55, 41, -69, 70, -128, 45, -52, -98, 34, -14, 22, 50, -126, 119, 21, 49, 35, -70, -27, 79, 44, 5, 18, 103, -114, 101, -98, -18, -21, -63, 122, 2, -38, -111, -84, -62, 33, -17, 57, 18, 124, -20, -84, 120, 21, 10, -75, 5, 25, 73, -126, -79, -63, 27, 88, 106, -14, -75, -71, 111, -32, 43, 70, 64, -34, 2, 59, -65, -117, 52, -102, 14, -111, -28, -112, 72, -1, 90, 43, -128, -97, -73, -61, 111, -37, 118, 107, 84, 13, -65, 121, 26, 107, -92, 37, 93, -126, 41, -56, 122, -46, -103, -71, -60, -53, 37, -5, -84, -86, -58, 69, 89, -117, 121, -59, 91, 99, 79, -18, -60, -124, -126, 120, -28, 108, 45, 126, -118, 3, 53, -44, -90, 85, -92, 52, 69, 41, 60, 110, -119, -82, 12, 84, -88, 43, -34, -81, 106, 43, 34, -10, -14, 70, 67, -7, 92, 0, 9, 85, -12, -77, -21, 108, -21, 19, 33, 107, 19, 33, 40, 114, 55, -48, 43, -69, 84, 52, 80, -76, -110, -17, -67, -86, 99, -105, 75, 76, -30, -85, -24, 73, 1, 57, -97, -6, 28, -43, 0, 96, 28, 91, -58, 5, 16, -48, -42, -53, 37, -119, -70, 7, -19, -45, 51, -62, -36, -46, 105, -110, 103, 27, 1, -101, 87, 78, -16, -113, -26, -54, -117, -42, 3, 3, 19, -79, -13, 23, -94, 0, -42, -102, 102, 16, -5, -124, 6, 76, -119, -58, 112, -98, 40, 89, 2, -78, 84, 60, -50, -49, -20, 95, -35, -66, -43, 68, 122, 34, 40, -38, -104, 56, -11, 102, -122, 55, -27, -6, -90, 17, -65, -25, -90, 102, 124, 57, -104, -82, -9, 46, -26, -75, -38, -68, 20, -78, 90, -87, -127, -51, -70, 83, 64, 101, 98, 104, 19, 124, 33, 122, 79, 101, -58, -105, -128, 60, -106, 93, 62, -10, 25, 69, 6, 110, -66, 106, -47, -121, 11, -46, 17, -25, 61, -58, -20, -3, -81, -79, 115, -104, -56, 67, -57, -24, 106, -16, -55, 92, 52, 68, 56, 41, 124, -79, 45, 126, -104, -37, 54, -89, -64, -45, -104, -38, 59, -109, 13, 4, -1, 33, 16, -7, 69, -120, 70, 23, 90, 87, 92, -124, -59, -96, 83, -128, -47, -97, -17, -78, 117, 79, -19, 47, 61, 52, -105, -102, 15, 19, -49, -35, 89, -14, -93, -123, 75, -114, 124, -42, -121, -31, -13, 9, -41, -27, 4, 71, 126, 90, 123, 99, -23, -117, 71, 77, 9, -113, -63, 2, -126, 1, 1, 0, -62, -10, -35, -50, 117, 31, 22, -93, -71, 75, -125, 70, 112, 44, -99, 81, -31, -34, -38, -92, 99, -61, -10, 37, 46, -127, 4, 124, 17, 5, -111, 40, 13, -51, -11, -97, -85, 65, -69, -88, 56, -22, 24, 124, -104, 48, 116, 65, 89, -39, 33, 36, 126, 80, 63, -11, -95, 54, 82, 49, 44, -111, -29, 93, 37, -55, -108, 61, -55, -27, -127, -60, -17, 60, -88, 116, 68, 88, -52, 45, 120, 115, 113, 61, -24, -44, -29, -2, 74, 21, 91, 85, -95, -72, -57, 111, 57, 87, 76, 97, -21, -46, 87, -90, 7, -95, -47, 80, 70, -36, 104, -14, -25, -102, 127, 16, 85, -59, 56, -66, 31, -117, 110, 96, -39, -53, 18, -49, 10, -111, 120, 85, 12, 15, 83, 17, 66, -10, -89, 100, -108, 83, -34, 71, 119, -119, 87, -98, -44, -105, 112, 23, 1, -123, -107, 23, -123, 13, 39, -61, -81, -104, 66, 94, 89, -103, 100, -122, 96, -49, -62, 99, -73, 60, 22, -54, 44, 16, -24, 97, -57, 16, 26, 71, 102, -103, -17, -33, -3, -66, 123, 80, -23, 5, -74, 38, -100, -128, 96, -67, 38, -12, 65, 38, -42, -55, 101, 2, 109, -111, 13, 13, -32, -64, 88, 58, -1, -60, -33, -60, 73, 54, -32, -120, -78, -25, 26, 97, -57, -6, -103, -7, -10, 46, -127, 97, -37, 29, -109, 86, -85, 99, 119, -112, 105, -63, -124, 14, -22, 49, 40, 116, 59, -90, -16, -39, 2, -126, 1, 1, 0, -63, -54, 38, 15, -105, -10, -128, 76, -108, 111, -119, -118, -57, 48, 94, -40, -20, 29, 61, -52, -51, -91, -79, 105, -55, -119, -20, 64, -15, -62, -76, 17, 43, -9, 19, 99, 65, -103, -46, -68, -34, 31, -98, -13, -84, -116, -8, 107, -100, -116, 113, -38, 105, -109, 32, 57, 73, 97, -115, -8, 34, 97, -81, 113, 14, -68, 44, 104, -64, -35, -96, 39, -124, -55, 41, 69, -47, 1, 114, 109, 105, -52, -40, 111, -34, 81, -55, 56, -8, 74, 39, 64, -114, -109, 121, -52, -5, -108, -76, -4, -19, 106, 124, 96, -4, -112, 13, 61, -40, -37, -1, -45, 2, 8, 122, 86, -107, -11, -51, -5, 47, -69, -120, -63, -69, 107, -76, 48, 55, 77, 25, 46, 30, -95, -63, 28, 63, -79, -96, -128, 42, -30, -41, 107, 17, 44, 58, -8, -116, 37, 119, 8, 119, 110, 42, 62, 93, 75, -44, -127, 82, 108, -81, 9, -42, 72, 111, -76, 48, -21, 70, -6, 36, -108, 11, -87, 105, 61, 127, -49, -96, -43, -122, 92, -10, -86, -114, -20, 50, -18, -74, 101, 69, 17, -98, 121, -70, 6, 30, -105, -21, 20, 88, -117, 31, 0, 88, -24, -66, -69, -17, 114, -123, -87, -75, -27, 40, -94, -28, 12, -50, 73, -88, -16, 89, 84, -43, -69, -1, 37, -93, -128, 14, -101, -107, -22, -20, 7, -29, -113, -94, 76, -23, 66, -49, 104, 60, -64, 23, -111, 124, 100, 24, 37, 19, 29, 2, -126, 1, 0, 58, 109, 48, -37, -122, 77, -30, -62, -3, -20, -101, 82, -88, -101, 54, 42, 43, -66, 85, 87, -98, 110, 67, 125, -79, 10, 9, 6, 5, 51, -35, -28, 90, -2, -75, -11, 59, -91, 95, 79, 114, 126, -11, 7, -95, -76, 35, -94, -46, 2, 55, -28, 111, -42, 44, -44, -73, -109, 71, -34, 100, -76, -13, -90, 30, -124, -30, 96, 1, -7, 61, -126, 127, 15, 118, -116, 33, 79, 91, 32, -27, 79, -13, 71, -46, 86, -70, 92, -94, 102, -12, 16, 29, 126, -6, -123, 98, 113, -66, -6, 57, 105, -73, -54, -111, -50, -12, -93, 82, 25, 11, 122, 127, -35, -44, -26, 88, 77, -38, 75, 95, -72, -79, 67, 101, 1, 110, -119, -115, 105, 58, -34, -127, -42, -75, -42, 30, 115, 60, -122, -17, -52, -110, 120, 104, 98, 72, 87, -40, -19, -23, 49, 123, -53, 68, 122, -33, -20, -87, 86, 3, 113, 101, -78, 80, -73, -97, 96, -123, -14, -67, 22, -108, -6, -12, -7, 113, 107, 63, -72, -51, -89, 13, -71, 8, 14, 105, -52, 126, -122, 110, -2, 56, 86, -11, -41, 108, 95, 44, -98, -126, -26, 0, 0, 91, -83, -49, 15, -125, 54, 76, -21, 51, -57, 112, -87, 125, -84, -54, 66, 80, -114, -103, -117, 93, -47, -44, 30, 41, -121, -8, 76, -24, 113, -41, 100, 51, -2, 17, 1, -112, 43, 38, -47, -88, 95, -51, -21, -118, 83, 97, 4, 52, 60, 59, 65, 2, -126, 1, 0, 26, 47, 13, 27, 120, 69, -25, 41, -15, -72, 108, 86, 34, -7, -57, 38, -6, 40, 45, 76, 121, -48, -44, 122, -35, -81, 84, 11, -90, 94, -49, 99, -82, -108, 16, -69, -115, -122, -110, 49, -48, -75, 103, 13, -73, -105, -56, -115, 9, -74, -12, 63, 53, -102, -102, 117, 3, 20, 58, 81, 119, -101, -55, 79, -74, 84, -8, -113, 34, -40, 15, 38, -89, -53, 98, 87, 59, -103, 61, 115, -55, 34, -45, 111, -78, 19, 76, -29, -12, -80, 88, 67, 97, -64, 77, 105, -61, -24, 96, -41, -9, -32, 54, 116, 8, 76, 18, 109, -13, -38, 45, -29, -67, -41, -107, 104, 19, -107, 5, -62, -43, -67, 58, 10, 43, 31, -81, 86, 0, 114, -37, 95, 30, -26, 110, 40, 57, -10, -17, 31, -62, 43, -86, 61, -98, 49, 98, -70, 104, 125, 59, 107, 26, 111, -7, 39, 58, 5, -33, -19, -91, 76, 104, 14, 37, 52, -34, 90, -13, 109, 38, -58, -17, -96, 77, 63, 19, -88, 42, -105, -52, 60, 109, -114, 44, 9, -7, -117, -78, -118, 12, 124, -4, 107, 24, 5, -116, 123, -3, 48, 59, -92, 33, 30, -109, 14, -63, -12, -104, -88, -35, -2, -108, 78, -52, -13, -20, -100, -83, -63, -119, 49, -20, -80, -92, -15, 80, 123, -71, 74, -59, -97, -84, -39, -102, -43, 6, 21, 62, -53, 14, 123, -29, -36, -110, 23, -100, 117, -69, -7, 125, 92, 44, -30, -3, -123, 2, -126, 1, 0, 94, -20, 112, -45, 31, -65, -30, 27, 103, 31, -9, 85, -110, -111, -113, -99, -93, -13, -125, -128, 64, 93, -101, -89, -23, -9, -94, -36, 10, 9, -97, 47, -67, 13, 3, 40, -29, 17, 74, -48, 106, 78, 16, 126, -43, -4, -49, 94, -75, 7, -22, 112, 124, -123, -47, -87, -20, -92, -101, 65, 57, -83, -38, 12, 81, -19, 71, 58, 102, 104, -21, -82, -24, -53, -119, 14, 114, -122, 83, 98, 49, -122, 60, 26, -46, -42, 112, -109, 54, 28, 40, -14, -126, 13, -19, 0, -47, 118, 56, -76, 107, 69, -79, 17, -91, -6, 62, 49, -127, 112, 39, -62, 61, 88, 125, -61, 49, 30, -3, -21, 119, 57, 1, 10, -19, 123, 22, 114, -91, -72, 9, 80, -34, 98, -55, -111, -40, -81, 31, 62, -104, 63, 0, 95, 11, -35, -58, -85, 87, -37, 98, -32, -124, -24, 19, -101, -72, -13, -5, 26, 11, -81, 35, -38, 9, 17, -15, -72, -91, 60, -55, 57, -27, 0, 5, 36, -68, 110, 33, 35, -107, -26, -70, -113, -69, 63, 4, 22, -7, -51, 25, 69, -11, -97, 66, -102, -72, 1, -95, 34, 63, -18, -105, -41, -125, 38, 126, 4, -14, 48, 51, -82, 112, -69, -29, -50, -11, 23, 115, 27, 69, 119, 118, -42, 46, -84, 31, -115, 69, -126, 122, 36, 12, -106, 100, -116, -102, 14, -63, -90, -51, -30, -64, -94, -91, 29, -58, 39, -116, 30, 12, 11, 37, -20, -54, -63};

    private Socket socket;
    private Server server;
    private PrintWriter writer;
    private User user, partner;

    UserThread(Socket socket, Server server) {
        this.socket = socket;
        this.server = server;
    }

    private String decrypt(String base64String) {
        Base64.Decoder decoder = Base64.getDecoder();
        byte[] bytes = decoder.decode(base64String);
        String result = "";
        try {
            PrivateKey prvkey = KeyFactory.getInstance("RSA").generatePrivate(new PKCS8EncodedKeySpec(prvbytes));
            Cipher cipher = Cipher.getInstance("RSA");
            cipher.init(Cipher.DECRYPT_MODE, prvkey);
            result = new String(cipher.doFinal(bytes));
        } catch (NoSuchAlgorithmException ex) {
            System.out.println("WTF how did this happen??! " + ex.getMessage());
        } catch (NoSuchPaddingException | IllegalBlockSizeException | BadPaddingException | InvalidKeySpecException | InvalidKeyException ex) {
            System.out.println("Error: " + ex.getMessage());
        }
        return result;
    }

    private String encrypt(String string, PublicKey publicKey) {
        Base64.Encoder encoder = Base64.getEncoder();
        byte[] result = new byte[40];
        try {
            Cipher cipher = Cipher.getInstance("RSA");
            cipher.init(Cipher.ENCRYPT_MODE, publicKey);
            result = cipher.doFinal(string.getBytes());
        } catch (NoSuchAlgorithmException ex) {
            System.out.println("WTF how did this happen??! " + ex.getMessage());
        } catch (IllegalBlockSizeException | BadPaddingException | NoSuchPaddingException | InvalidKeyException ex) {
            System.out.println("Error: " + ex.getMessage());
        }
        return encoder.encodeToString(result);
    }

    public void run() {
        String userName = null;
        String serverMessage;
        try {
            InputStream input = socket.getInputStream();
            BufferedReader reader = new BufferedReader(new InputStreamReader(input));

            OutputStream output = socket.getOutputStream();
            writer = new PrintWriter(output, true);

            userName = decrypt(reader.readLine());
            user = new User(userName); //todo allow old users
            user.setThread(this);
            server.addUser(user);
            String partnerName = decrypt(reader.readLine());
            partner = server.getUserByName(partnerName);
            if (partner == null) {
                writer.println("This user is not available.");
            }

            String clientMessage;

            do {
                clientMessage = decrypt(reader.readLine());
                serverMessage = "R " + userName + " " + clientMessage;
                partner.getThread().sendMessage(serverMessage);

            } while (!clientMessage.equals("!LOGOFF"));

            user.setOnline(false);
            socket.close();
            partner.getThread().sendMessage("Ur Partner Logged off");

        } catch (SocketException ex) {
            if (userName != null) {
                user.setOnline(false);
                partner.getThread().sendMessage("Ur Partner Logged off");
            }
        } catch (IOException ex) {
            System.out.println("Error in UserThread: " + ex.getMessage());
            ex.printStackTrace();
        }
    }

    /**
     * Sends a message to the client.
     */
    private void sendMessage(String message) {
        writer.println(message);
    }
}
